<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>中间件 on 一层</title><link>https://emerywan.github.io/blog/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><description>Recent content in 中间件 on 一层</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 20 Jul 2021 21:14:45 +0800</lastBuildDate><atom:link href="https://emerywan.github.io/blog/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>消息队列</title><link>https://emerywan.github.io/blog/p/mq/</link><pubDate>Tue, 20 Jul 2021 21:14:45 +0800</pubDate><guid>https://emerywan.github.io/blog/p/mq/</guid><description>&lt;img src="https://emerywan.github.io/blog/imgs/10.jpeg" alt="Featured image of post 消息队列" />&lt;h2 id="kafka">Kafka&lt;/h2>
&lt;p>使用 Zookeeper 作为注册中心，负责 Kafka 集群元数据的管理，以及集群协调工作。每个 Kafka 服务器启动时连接到 Zookeeper，将自己注册到 Zookeeper 当中。&lt;/p>
&lt;h3 id="基本概念">基本概念&lt;/h3>
&lt;ul>
&lt;li>Record&lt;/li>
&lt;/ul>
&lt;p>代表记录&lt;/p>
&lt;ul>
&lt;li>Producer&lt;/li>
&lt;/ul>
&lt;p>生产者，负责发送消息&lt;/p>
&lt;ul>
&lt;li>Consumer&lt;/li>
&lt;/ul>
&lt;p>消费者，负责消费消息&lt;/p>
&lt;ul>
&lt;li>Topic&lt;/li>
&lt;/ul>
&lt;p>主题，消息都会由一个主题方式来组织，可以理解为对于消息的一个分类。
Producer 将消息发送到特定的主题，Consumer 通过订阅特定的主题来消费消息。&lt;/p>
&lt;ul>
&lt;li>Broker&lt;/li>
&lt;/ul>
&lt;p>Kafka 服务器。可以看做是一个独立的 Kafka 实例，多个 Kafka Broker 组成一个 Kafka Cluster。&lt;/p>
&lt;ul>
&lt;li>Partition&lt;/li>
&lt;/ul>
&lt;p>分区，属于 Topic 的一部分，一个 Topic 可以有多个 Partition，同一个 Topic 下的 Partition 可以分布在不同的 Broker 上。
通常每个分区的消息都是按照顺序读取的，不同的分区无法保证顺序性。
分区也就是我们常说的数据分片 sharding 机制，主要是为了提高系统的伸缩能力，通过分区，消息的读写可以负载均衡到多个不同节点上。&lt;/p>
&lt;ul>
&lt;li>Leader/Follower&lt;/li>
&lt;/ul>
&lt;p>分区的副本。为了保证高可用，分区都会有一些副本，每个分区都会有一个Leader主副本负责读写数据，Follower从副本只负责和Leader副本保持数据同步，不对外提供任何服务&lt;/p>
&lt;ul>
&lt;li>offset&lt;/li>
&lt;/ul>
&lt;p>偏移量，分区中的每一条消息都会根据时间先后顺序有一个递增的序号，这个序号就是 offset 偏移量&lt;/p>
&lt;p>Kafka就是用offset来表示消费者的消费进度到哪了，每个消费者会都有自己的offset。&lt;/p>
&lt;h2 id="rocketmq">RocketMQ&lt;/h2>
&lt;h2 id="rabbitmq">RabbitMQ&lt;/h2>
&lt;p>Broker： 简单来说就是消息队列服务器实体
Exchange： 消息交换机，它指定消息按什么规则，路由到哪个队列
Queue： 消息队列载体，每个消息都会被投入到一个或多个队列
Binding： 绑定，它的作用就是把exchange和queue按照路由规则绑定起来
Routing Key： 路由关键字，exchange根据这个关键字进行消息投递
VHost： vhost 可以理解为虚拟 broker ，即 mini-RabbitMQ server。其内部均含有独立的 queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。
Producer： 消息生产者，就是投递消息的程序
Consumer： 消息消费者，就是接受消息的程序
Channel： 消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务&lt;/p>
&lt;p>由Exchange、Queue、RoutingKey三个才能决定一个从Exchange到Queue的唯一的线路。&lt;/p></description></item></channel></rss>