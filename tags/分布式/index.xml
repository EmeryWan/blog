<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式 on 一层</title><link>https://blog.letout.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link><description>Recent content in 分布式 on 一层</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 24 Jul 2020 12:14:45 +0800</lastBuildDate><atom:link href="https://blog.letout.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>分布式定理</title><link>https://blog.letout.cn/p/cap-and-base/</link><pubDate>Fri, 24 Jul 2020 12:14:45 +0800</pubDate><guid>https://blog.letout.cn/p/cap-and-base/</guid><description>&lt;h2 id="cap-定理">CAP 定理&lt;/h2>
&lt;p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。&lt;/p>
&lt;ul>
&lt;li>一致性 Consistency&lt;/li>
&lt;/ul>
&lt;p>更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。&lt;/p>
&lt;ul>
&lt;li>可用性 Availability&lt;/li>
&lt;/ul>
&lt;p>服务是一直可用，正常响应。&lt;/p>
&lt;ul>
&lt;li>分区容错性 Partition tolerance&lt;/li>
&lt;/ul>
&lt;p>分布式系统在遇到某节点或网络分区故障时，仍然能够对外提供满足一致性或可用性的服务。&lt;/p>
&lt;h3 id="cap-权衡">CAP 权衡&lt;/h3>
&lt;h4 id="cp">CP&lt;/h4>
&lt;p>一致性 &amp;amp; 分区容错性&lt;/p>
&lt;p>涉及金钱交易的场景，必须要保证一致性。&lt;/p>
&lt;p>Zookeeper 是偏向于 CP 的服务。优先满足一致性。当在选举时，会停止服务，直到选举成功才会再次对外提供服务，在选举成功后，由于一主多从的结构，Zookeeper 是一个高可用的注册中心。&lt;/p>
&lt;h4 id="ap">AP&lt;/h4>
&lt;p>可用性 &amp;amp; 分区容错性&lt;/p>
&lt;p>互联网的大部分应用场景，都是保证可用性。例如当网络请求非常大时，一些服务可以不提供，如注册服务。&lt;/p>
&lt;p>Eureka 偏向于 AP。优先保证可用性，实现最终一致性。Eureka 各个节点都是平等的，几个节点挂掉不会影响正常的节点工作，剩余的节点依然可以提供注册和查询服务，客户端在向某个节点注册时连接失败，会自动切换到其他节点，只要有一台 Eureka 服务存在，就能保证注册服务的可用。&lt;/p>
&lt;h2 id="base-定理">BASE 定理&lt;/h2>
&lt;p>BASE 是对 CAP 的延伸，核心思想是即使无法做到强一致性（CAP是强一致性），但是应用可以采用适合的方式达到最终一致性。&lt;/p>
&lt;ul>
&lt;li>基本可用 Basically Available&lt;/li>
&lt;/ul>
&lt;p>分布式系统在出现故障时，允许损失部分可用性，保证核心可用。如在电商大促时，为应对访问量的激增，部分用户被引导到降级页面，一些服务提供降级。&lt;/p>
&lt;ul>
&lt;li>软状态 Soft State&lt;/li>
&lt;/ul>
&lt;p>允许系统存在中间状态，该中间状态不会影响系统整体可用性。分布式存储一般数据至少会有三个副本，允许不同节点副本同步的延时就是软状态的体现。&lt;/p>
&lt;ul>
&lt;li>最终一致性 Eventual Consistency&lt;/li>
&lt;/ul>
&lt;p>系统中的所有数据副本经过一定的时候后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。&lt;/p></description></item></channel></rss>